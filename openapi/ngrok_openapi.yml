openapi: 3.0.0
info:
  title: ngrok APIs
  version: 1.0.0
servers:
  - url: https://api.ngrok.com
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
tags:
  - name: API Keys
  - name: Abuse Reports (Publish?!)
  - name: Endpoint Configurations
  - name: Endpoint Configurations > Create Endpoint Configurations
  - name: IPs
  - name: IPs > IP Policies
  - name: IPs > IP Policy Rules
  - name: IPs > IP Restrictions
  - name: IPs > IP Restrictions > Display Warning (for testing)
  - name: IPs > IP Restrictions > Enforce
  - name: Events (Dev)
  - name: Events (Dev) > Event Destinations
  - name: Events (Dev) > Event Subscriptions (Dev)
  - name: Events (Dev) > Event Streams (Publish?!)
  - name: Domains (DEV)
  - name: Domains (DEV) > Reserved Domains
  - name: Domains (DEV) > Reserved Addresses (TODO)
  - name: Certificates (DEV)
  - name: Certificates (DEV) > TLS CAs
  - name: Certificates (DEV) > TLS Certificates (TODO)
  - name: SSH (TODO)
  - name: SSH (TODO) > SSH Certificate Authorities (TODO)
  - name: SSH (TODO) > SSH Credentials (TODO)
  - name: SSH (TODO) > SSH Host Certs (TODO)
  - name: SSH (TODO) > SSH User Certs (TODO)
  - name: Tunnels (DEV)
  - name: Tunnels (DEV) > Tunnel Credentials (TODO)
  - name: Tunnels (DEV) > Tunnel Sessions
paths:
  /api_keys:
    post:
      tags:
        - Tunnels (DEV) > Tunnel Credentials (TODO)
      summary: Create Tunnel Credential
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                description: "Postman test: test key"
                metadata: '{"environment":"postman-test"}'
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - API Keys
      summary: List API Keys
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api_keys/{api_key_id}:
    get:
      tags:
        - API Keys
      summary: Get API Key
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: api_key_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - API Keys
      summary: Update API Key
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                description: "Postman test: test key changed"
                metadata: '{"environment":"postman-test", "changed":true}'
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: api_key_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - API Keys
      summary: Delete API Key
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: api_key_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /abuse_reports/{abuse_report_id}:
    get:
      tags:
        - Abuse Reports (Publish?!)
      summary: Get Abuse Report
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: abuse_report_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /abuse_reports:
    post:
      tags:
        - Abuse Reports (Publish?!)
      summary: Create Abuse Report
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                description: ad-hoc dev testing
                metadata: '{"environment":"dev"}'
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /endpoint_configurations:
    post:
      tags:
        - Endpoint Configurations > Create Endpoint Configurations
      summary: "HTTPS Endpoint: with SAML Auth (Okta)"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                type: https
                description: "Postman test: SAML with auth (Okta)"
                metadata: '{"environment":"postman-test"}'
                saml:
                  enabled: true
                  idp_metadata_url: >-
                    https://frederico.oktapreview.com/app/exk12v3q8m8aC2QjV0h8/sso/saml/metadata
                  allow_idp_initiated: true
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Endpoint Configurations
      summary: List Endpoint Configurations
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /endpoint_configurations/{endpoint_configuration_id}:
    get:
      tags:
        - Endpoint Configurations
      summary: Get Endpoint Configuration
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: endpoint_configuration_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - Endpoint Configurations
      summary: Update Endpoint Configuration
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                metadata: '{"environment":"postman-test", "changed":true}'
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: endpoint_configuration_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Endpoint Configurations
      summary: Delete Endpoint Configuration
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: endpoint_configuration_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /ip_policies:
    post:
      tags:
        - IPs > IP Policies
      summary: Create IP Policy (deny)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                description: "Postman test: test IP policy (deny)"
                metadata: '{"environment":"postman-test"}'
                action: deny
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - IPs > IP Policies
      summary: List IP Policies
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /ip_policies/{ip_policy_id}:
    get:
      tags:
        - IPs > IP Policies
      summary: Get IP Policy
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: ip_policy_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - IPs > IP Policies
      summary: Update IP Policy
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                metadata: '{"environment":"postman-test", "changed":true}'
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: ip_policy_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - IPs > IP Policies
      summary: Delete IP Policy
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: ip_policy_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /ip_policy_rules:
    post:
      tags:
        - IPs > IP Policy Rules
      summary: Create IP Policy Rule (any cidr IPv6)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                description: "Postman test: test IP policy rule (any cidr IPv6)"
                metadata: '{"environment":"postman-test"}'
                cidr: "::/0"
                ip_policy_id: "{{ip_policy_id}}"
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: ""
          in: header
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - IPs > IP Policy Rules
      summary: List IP Policy Rules
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /ip_policy_rules/{ip_policy_rule}:
    get:
      tags:
        - IPs > IP Policy Rules
      summary: Get IP Policy Rule
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: ip_policy_rule
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - IPs > IP Policy Rules
      summary: Update IP Policy Rule
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                metadata: '{"environment":"postman-test", "changed":true}'
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: ip_policy_rule
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - IPs > IP Policy Rules
      summary: Delete IP Policy Rule
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: ip_policy_rule
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /ip_restrictions:
    post:
      tags:
        - IPs > IP Restrictions > Enforce
      summary: Create IP Restriction (endpoints)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                description: "Postman test: test IP restriction (endpoints)"
                metadata: '{"environment":"postman-test"}'
                type: endpoints
                enforced: true
                ip_policy_ids:
                  - "{{ip_policy_id}}"
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - IPs > IP Restrictions
      summary: List IP Restrictions
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /ip_restrictions/{ip_restriction_id}:
    get:
      tags:
        - IPs > IP Restrictions
      summary: Get IP Restriction
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: ip_restriction_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - IPs > IP Restrictions
      summary: Update IP Restriction
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                metadata: '{"environment":"postman-test", "changed":true}'
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: ip_restriction_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - IPs > IP Restrictions
      summary: Delete IP Restriction
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: ip_restriction_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /event_destinations:
    post:
      tags:
        - Events (Dev) > Event Destinations
      summary: Create Event Destination
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |-
                {
                    "description":"Postman test: test key",
                    "metadata": "{\"environment\":\"postman-test\"}"
                    "format": "json",
                    "target": {
                        "firehose": null,
                        "kinesis": null,
                        "cloudwatch_logs": {
                            "auth": {
                                "role": {
                                    "role_arn": "{{aws_role_arn}}"
                                }
                            },
                            "log_group_arn": "{{aws_log_group_arn}}"
                        }
                    }
                }
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Events (Dev) > Event Destinations
      summary: List Event Destinations
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /event_destinations/{event_destination_id}:
    get:
      tags:
        - Events (Dev) > Event Destinations
      summary: Get Event Destination
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: event_destination_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - Events (Dev) > Event Destinations
      summary: Update Event Destinations
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                description: "Postman test: event destination changed"
                metadata: '{"environment":"postman-test", "changed":true}'
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: event_destination_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Events (Dev) > Event Destinations
      summary: Delete Event Destination
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: event_destination_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /event_subscriptions:
    post:
      tags:
        - Events (Dev) > Event Subscriptions (Dev)
      summary: Create Event Subscription HTTP Requests
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                description: "Postman test: event subscription"
                metadata: '{"environment":"postman-test"}'
                sources:
                  - type: http_request_complete.v0
                    fields:
                      - http.request.url.path
                      - http.request.user_agent
                      - basic_auth.decision
                      - circuit_breaker.decision
                      - ip_policy.decision
                      - oauth.decision
                      - webhook_validation.decision
                destination_ids:
                  - "{{event_destination_id}}"
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Events (Dev) > Event Subscriptions (Dev)
      summary: List Event Subscriptions
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /event_subscriptions/{event_subscription_id}/sources/{event_subscription_source_type}:
    get:
      tags:
        - Events (Dev) > Event Subscriptions (Dev)
      summary: Get Event Subscription Source Details
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: event_subscription_id
          in: path
          schema:
            type: string
          required: true
        - name: event_subscription_source_type
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /event_subscriptions/{event_subscription_id}:
    get:
      tags:
        - Events (Dev) > Event Subscriptions (Dev)
      summary: Get Event Subscription Source Details Copy
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: event_subscription_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - Events (Dev) > Event Subscriptions (Dev)
      summary: Update Event Subscription
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                description: "Postman test: event subscription changed"
                metadata: '{"environment":"postman-test", "changed":true}'
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: event_subscription_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Events (Dev) > Event Subscriptions (Dev)
      summary: Delete Event Subscription
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: event_subscription_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /event_streams:
    post:
      tags:
        - Events (Dev) > Event Streams (Publish?!)
      summary: Create Event Stream
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |-
                {
                  "description": "low sampling, basic HTTP logs",
                  "fields": [
                    "http.request.method",
                    "http.response.status_code",
                    "conn.client_ip"
                  ],
                  "event_type": "http_request_complete",
                  "destination_ids": [ {{event_destination_id}} ],
                  "sampling_rate": 0.1
                }
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /reserved_domains:
    post:
      tags:
        - Domains (DEV) > Reserved Domains
      summary: Create Reserved Domain
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                description: "Postman test: test reserved domain"
                metadata: '{"environment":"postman-test"}'
                name: "{{$randomDomainWord}}.ngrok.io"
                https_endpoint_configuration_id: "{{endpoint_configuration_id}}"
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Domains (DEV) > Reserved Domains
      summary: List Reserved Domains
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /reserved_domains/{reserved_domain_id}:
    get:
      tags:
        - Domains (DEV) > Reserved Domains
      summary: Get Reserved Domain
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: reserved_domain_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - Domains (DEV) > Reserved Domains
      summary: Update Reserved Domain
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                description: "Postman test: test key changed"
                metadata: '{"environment":"postman-test", "changed":true}'
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: reserved_domain_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Domains (DEV) > Reserved Domains
      summary: Delete Reserved Domain
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: reserved_domain_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /certificate_authorities:
    post:
      tags:
        - Certificates (DEV) > TLS CAs
      summary: Create CA
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                description: >-
                  Postman test: Update Root CA from Let's Encrypt (pem available
                  at https://letsencrypt.org/certs/isrgrootx1.pem.txt)
                metadata: '{"environment":"postman-test"}'
                ca_pem: >
                  -----BEGIN CERTIFICATE-----

                  MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw

                  TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh

                  cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4

                  WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu

                  ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY

                  MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc

                  h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+

                  0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U

                  A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW

                  T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH

                  B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC

                  B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv

                  KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn

                  OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn

                  jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw

                  qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI

                  rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV

                  HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq

                  hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL

                  ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ

                  3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK

                  NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5

                  ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur

                  TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC

                  jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc

                  oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq

                  4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA

                  mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d

                  emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc=

                  -----END CERTIFICATE-----
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Certificates (DEV) > TLS CAs
      summary: List CAs
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /certificate_authorities/{certificate_authority_id}:
    get:
      tags:
        - Certificates (DEV) > TLS CAs
      summary: Get CA
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: certificate_authority_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - Certificates (DEV) > TLS CAs
      summary: Update CA
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                description: >-
                  Postman test: Update Root CA from Let's Encrypt (pem available
                  at https://letsencrypt.org/certs/isrgrootx1.pem.txt) changed
                metadata: '{"environment":"postman-test", "changed":true}'
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: certificate_authority_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Certificates (DEV) > TLS CAs
      summary: Delete CA
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: certificate_authority_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /credentials:
    get:
      tags:
        - Tunnels (DEV) > Tunnel Credentials (TODO)
      summary: List Tunnels Credentials
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /tunnel_sessions:
    get:
      tags:
        - Tunnels (DEV) > Tunnel Sessions
      summary: List Tunnels Sessions
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /tunnel_sessions/{tunnel_session_id}:
    get:
      tags:
        - Tunnels (DEV) > Tunnel Sessions
      summary: Get Tunnels Session
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: tunnel_session_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /tunnel_sessions/{tunnel_session_id}/restart:
    post:
      tags:
        - Tunnels (DEV) > Tunnel Sessions
      summary: Restart Tunnel Agent
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: {}
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: tunnel_session_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /tunnel_sessions/{tunnel_session_id}/stop:
    post:
      tags:
        - Tunnels (DEV) > Tunnel Sessions
      summary: Stop Tunnel Agent
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: {}
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: tunnel_session_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /tunnel_sessions/{tunnel_session_id}/update:
    post:
      tags:
        - Tunnels (DEV) > Tunnel Sessions
      summary: Update Tunnel Agent
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: {}
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
        - name: tunnel_session_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /tunnels:
    get:
      tags:
        - Tunnels (DEV)
      summary: List Tunnels
      security:
        - bearerAuth: []
      parameters:
        - name: Ngrok-Version
          in: header
          schema:
            type: integer
          example: "2"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
