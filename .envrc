# ============================================================================
# ngrok-docs Development Environment Setup (.envrc)
# ============================================================================
# This file automatically sets up the development environment when you enter
# the project directory. It ensures Node.js, pnpm, and dependencies are ready.
#
# Prerequisites: direnv must be installed and allowed (`direnv allow`)
# ============================================================================

echo "Starting environment loading…"
START_TIME_MS=$(perl -MTime::HiRes=time -e 'printf "%.0f\n", time * 1000')

# ============================================================================
# DIRENV CONFIGURATION
# ============================================================================
# Disable direnv timeout warnings that can appear during long setup operations
# References:
# - https://github.com/direnv/direnv/issues/419#issuecomment-442005962
# - https://direnv.net/man/direnv.toml.1.html#codewarntimeoutcode
export DIRENV_WARN_TIMEOUT=876000h # 100 years in hours (effectively disabled)

# ============================================================================
# TELEMETRY AND PRIVACY SETTINGS
# ============================================================================
# Disable telemetry collection for various tools to improve privacy and performance
export DO_NOT_TRACK=1                    # Universal opt-out signal
export TURBO_TELEMETRY_DISABLED=1        # Turborepo telemetry
export VERCEL_TELEMETRY_DISABLED=1       # Vercel CLI telemetry

# ============================================================================
# NIX SUPPORT
# ============================================================================
# If using NixOS or Nix package manager, use the flake-based environment
if has nix; then
	echo "Using Nix flake environment…"
	use flake
else
	# ============================================================================
	# NODE VERSION MANAGER (FNM) SETUP
	# ============================================================================
	# Fast Node Manager (fnm) handles Node.js version switching based on .nvmrc

	# Detect operating system for cross-platform fnm path resolution
	OS="$(uname -s)"
	case "${OS}" in
	   MINGW* | Win*) OS="Windows" ;;
	esac

	# Set FNM_PATH based on OS conventions and user preferences
	if [ -d "$HOME/.fnm" ]; then
	  export FNM_PATH="$HOME/.fnm"                                    # Legacy location
	elif [ -n "$XDG_DATA_HOME" ]; then
	  export FNM_PATH="$XDG_DATA_HOME/fnm"                           # XDG Base Directory spec
	elif [ "$OS" = "Darwin" ]; then
	  export FNM_PATH="$HOME/Library/Application Support/fnm"        # macOS standard
	else
	  export FNM_PATH="$HOME/.local/share/fnm"                       # Linux/Unix standard
	fi

	# Auto-install fnm if not present
	if ! command -v fnm &> /dev/null || [ -d "$FNM_PATH" ]; then
		echo "fnm is not installed. Installing fnm…"
		curl -fsSL https://fnm.vercel.app/install | bash -s -- --skip-shell
	else
		echo "fnm is already installed."
	fi

	# Add fnm to PATH and initialize
	export PATH="$FNM_PATH:$PATH"
	eval "`fnm env`"

	# Install Node.js version specified in .nvmrc file
	# This ensures everyone uses the same Node.js version
	fnm install

	# =============================================================================
	# PACKAGE MANAGER SETUP
	# =============================================================================

	# Update npm and corepack to latest versions
	# corepack is Node.js's official package manager manager
	yes | npm update --global corepack npm

	# Enable pnpm support in corepack
	# pnpm is our chosen package manager for this project
	yes | corepack enable pnpm

	# Install the specific pnpm version defined in package.json#packageManager
	# This ensures everyone uses the exact same package manager version
	yes | corepack install
fi

# =============================================================================
# DEPENDENCY INSTALLATION
# =============================================================================

# Install all project dependencies
pnpm install

# ============================================================================
# ENVIRONMENT READY CONFIRMATION
# ============================================================================
# Display setup completion status and timing information
pnpm_version=$(pnpm --version)
echo -e "\nEnvironment is ready.\nUsing pnpm version: $pnpm_version\n"

END_TIME_MS=$(perl -MTime::HiRes=time -e 'printf "%.0f\n", time * 1000')
ELAPSED_TIME=$(bc <<< "scale=3; ($END_TIME_MS - $START_TIME_MS) / 1000")
echo -e "direnv environment setup took $ELAPSED_TIME s.\n"

# =============================================================================
# WHAT HAPPENS NEXT
# =============================================================================
# After this completes, you can:
# - `pnpm start` - Start the documentation development server
# - `pnpm build` - Build the documentation site
# - `pnpm test` - Run all tests
# - `pnpm typecheck` - Check TypeScript types
# - `pnpm fmt` - Format and lint code
# - See README.md for more commands and workflows
# =============================================================================

# ============================================================================
# FIRST-TIME SETUP GUIDANCE
# ============================================================================
# Show helpful next steps only on the first run
FIRST_RUN_MARKER=".direnv-initialized"

if [ ! -f "$FIRST_RUN_MARKER" ]; then
  echo "============================================================================"
  echo "🎉 Welcome to ngrok-docs! Here's what you can do next:"
  echo "============================================================================"
  echo ""
  echo "📖 Start the documentation site:"
  echo "   pnpm start"
  echo ""
  echo "🔨 Build the documentation:"
  echo "   pnpm build"
  echo ""
  echo "🧪 Run tests:"
  echo "   pnpm test"
  echo ""
  echo "📋 Check types:"
  echo "   pnpm typecheck"
  echo ""
  echo "✨ Format & lint:"
  echo "   pnpm fmt"
  echo ""
  echo "🔍 Validate code blocks:"
  echo "   pnpm validate-codeblocks"
  echo ""
  echo "🧹 Clear cache (if needed):"
  echo "   pnpm clear-cache"
  echo ""
  echo "📚 Full documentation: https://ngrok.com/docs"
  echo "📄 See README.md for more details"
  echo ""
  echo "============================================================================"
  
  # Create marker file to indicate setup has been completed
  touch "$FIRST_RUN_MARKER"
fi
